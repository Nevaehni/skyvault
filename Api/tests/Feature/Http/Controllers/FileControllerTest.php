<?php

namespace Tests\Feature\Http\Controllers;

use App\Http\Controllers\FileController;
use App\Http\Resources\FilesResource;
use App\Models\File;
use App\Models\User;
use App\Services\FileService;
use Exception;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Http\Request;
use Illuminate\Http\UploadedFile;
use Tests\TestCase;

class FileControllerTest extends TestCase
{
    use DatabaseTransactions, WithFaker;

    protected static bool $initialized = false;

    public function setUp(): void
    {
        parent::setUp();
        $this->artisan('migrate');
        $this->user = User::factory()->create();
    }

    public function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        unlink(tempnam(sys_get_temp_dir(), File::TEST_FOLDER_ALIAS));
    }

    public function testIndexReturnsFilesResource()
    {
        $request = Request::create('/files');
        $request->setUserResolver(function () {
            return $this->user;
        });

        $controller = $this->app->make(FileController::class);
        $response = $controller->index($request);

        $this->media = $this->user->files->pluck('media')->flatten();

        $expectedResponse = new FilesResource($this->media);
        $this->assertEquals($expectedResponse->response()->getContent(), $response->getContent());
    }

    public function testStoreCallsFileServiceAndReturnsSuccessResponse()
    {
        $user = User::factory()->create();

        // Generate a fake file
        $file = UploadedFile::fake()->image('image.jpg');

        // Send a POST request to the route without a folder ID
        $response = $this->actingAs($user)->post('api/upload', [
            'files' => [$file],
        ]);

        // Assert that the response is successful
        $response->assertStatus(201);

        // Assert the response contains the expected message
        $response->assertJson([
            'message' => 'Files uploaded successfully',
        ]);
    }

    public function testStoreReturnsErrorResponseOnException()
    {
        $file = UploadedFile::fake()->image("image.jpg");
        $fileData = ['files' => [$file]];
        $request = Request::create('/files', 'POST', $fileData);
        $request->setUserResolver(function () {
            return $this->user;
        });

        $mockFileService = $this->mock(FileService::class);
        $mockFileService
            ->shouldReceive('createMediaFiles')
            ->once()
            ->andThrow(new Exception());

        $this->app->instance(FileService::class, $mockFileService);

        $controller = $this->app->make(FileController::class);
        $response = $controller->store($request);

        $this->assertEquals(500, $response->getStatusCode());
        $this->assertEquals('An error occurred while processing your request', $response->getData(true)['message']);
    }

    public function testShowReturnsDownloadResponse()
    {
        $this->createFiles();

        $request = Request::create("/files/{$this->media[0]->id}", 'GET');
        $request->setUserResolver(function () {
            return $this->user;
        });

        $controller = $this->app->make(FileController::class);
        $response = $controller->show($this->media[0]);

        $this->assertEquals(200, $response->getStatusCode());
        $this->assertEquals($this->media[0]->getPath(), $response->getFile()->getPathname());
    }

    private function createFiles(int $amount = 1)
    {
        $this->files = File::factory()->count($amount)->create(['user_id' => $this->user->id]);
        $this->media = $this->files->pluck('media')->flatten();
    }
}
